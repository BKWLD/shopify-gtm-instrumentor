"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.5.1
// Main class, which accepts configuration in it's constructor and exposes
// helper methods
var ShopifyGtmInstrumentor,
    indexOf = [].indexOf;

var _default = ShopifyGtmInstrumentor = /*#__PURE__*/function () {
  // Save settings and hydrate vars
  function ShopifyGtmInstrumentor() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$debug = _ref.debug,
        debug = _ref$debug === void 0 ? false : _ref$debug;

    _classCallCheck(this, ShopifyGtmInstrumentor);

    this.debug = debug;
    this.occurances = [];
  } // Typically used for view of PDP page. If the payload is a string, it is
  // treated as a Shopify id and the variant will be fetched via Storefront
  // API. If an object, it's expected to be a Shopify variant is is mapped
  // to the Product Data schema


  _createClass(ShopifyGtmInstrumentor, [{
    key: "viewProductDetails",
    value: function viewProductDetails(payload) {
      var flatVariant, variant;
      variant = _typeof(payload) === 'object' ? payload : this.fetchVariant(payload);
      return this.pushEvent('View Product Details', _objectSpread(_objectSpread({}, flatVariant = this.makeFlatVariant(variant)), {}, {
        ecommerce: {
          detail: {
            products: [this.makeUaProductFieldObject(flatVariant)]
          }
        }
      }));
    } // Make flat object from a variant with nested product data

  }, {
    key: "makeFlatVariant",
    value: function makeFlatVariant(variant) {
      var ref, ref1, ref2, ref3;
      return {
        // Variant level data
        sku: variant.sku,
        variantId: variant.id,
        variantTitle: variant.title,
        price: variant.price,
        // Product level info
        productTitle: (ref = variant.product) != null ? ref.title : void 0,
        productVendor: (ref1 = variant.product) != null ? ref1.vendor : void 0,
        productType: ((ref2 = variant.product) != null ? ref2.productType : void 0) || ((ref3 = variant.product) != null ? ref3.type : void 0)
      };
    } // Convert a Shopify variant object to a UA productFieldObject. I'm
    // comibing the product and variant name because that's what Shopify does
    // with it's own events.
    // https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#product-data

  }, {
    key: "makeUaProductFieldObject",
    value: function makeUaProductFieldObject(flatVariant) {
      return {
        id: flatVariant.sku,
        name: flatVariant.productTitle + ' - ' + flatVariant.variantTitle,
        brand: flatVariant.productVendor,
        category: flatVariant.productType,
        variant: flatVariant.variantTitle,
        price: flatVariant.price
      };
    } // Lookup a product variant by id. Id may be a simple number or a
    // gid://shopify string

  }, {
    key: "fetchVariant",
    value: function fetchVariant(variantId) {
      throw 'fetchProductData not currently implemented';
    } // Push GTM dataLayer event

  }, {
    key: "pushEvent",
    value: function pushEvent(name, payload) {
      if (this.debug) {
        console.debug("'".concat(name, "'"), payload);
      }

      if (!window.dataLayer) {
        window.dataLayer = [];
      }

      return window.dataLayer.push(_objectSpread({
        event: name,
        firstOccurance: this.isFirstOccurance(name)
      }, payload));
    } // Return whether this is the first time the event has fired. This can be
    // helpeful in conjunction to prevent double triggering from events that are
    // also fired in the intial page response from Shopify, like Page Views.

  }, {
    key: "isFirstOccurance",
    value: function isFirstOccurance(eventName) {
      if (indexOf.call(this.occurances, eventName) >= 0) {
        return false;
      }

      this.occurances.push(eventName);
      return true;
    }
  }]);

  return ShopifyGtmInstrumentor;
}();

exports["default"] = _default;